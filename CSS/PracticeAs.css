/* ######################################################################################## */

/* 1. The following two HTML elements are stacked vertically 
when the browser window is smaller, but once the window is expanded, the 
two elements sit next to one another on the horizontal axis. 
What styling would you add to these two elements to make it so they
are always position vertically regardless of the window size? */ 

/* -----HTML-----
<body>
    <img src="google.png" />
    <input type="text" />
</body>

-----CSS-----
div { 
    display: block;
} */

/* ######################################################################################## */

/* 2. If you have an image inside of a div and want to create some space 
above the image, would you add the margin to the image or to the div it 
sits inside? Why?

You would add the margin to the div because if its content gets changed, for example 
if the image is replaced with another element such as a video, the margin
stylign would remain and would not be applied to an element that is subject 
to change.

/* ######################################################################################## */

/* 3. Create a CSS rule that applies to a general element.
    Apply the same rule to a class.
    And to an id.  */

    /* div { 
        margin-top: 100px;
    }

    .main { 
        margin-top: 100px;
    }

    #box { 
        margin-top: 100px;
    } */



/* NOTE: There are different conventions for naming classes for HTML elements, so 
there is not necessarily one universal preference, but rather it will vary depending on
the company and the project 
- Critically, the browser will automatically apply some minimal styling to your page, 
such as a margin around the body element. To get rid of this, you would simply 
target the body in the CSS file and explicitly set the margin to zero.
- It is also important to note that if you have vertically stacked divs and you 
you add a margin to the bottom of the top div, and a margin to the top fo the bottom div, 
the result will *NOT* but a sum of the two margins, but rather they will collapse into each
other, and the larger margin will always take precedence while the smaller 
margin is essentially not applied. There are some specific scenarios where this is not
exactly the case, but that is generally not the case.
/* ######################################################################################## */

/* 4. Create a CSS rule to horizontally center an element inside its parent div */

/* img { 
    display: block; 
    width: 200px; 
    margin-left: auto; 
    margin-right: auto;
} */


/* NOTE: There are three conditions that need to be in place to center elements: 
    1. The display property must be set to block-- an element cannot center itself if it
    doesn't control full control of the horizontal space.
    2. The element must have a width; an element cannot be centered inside the browser if it
    is larger than the browser itself
    3. The left and right margin of the element must be set to auto; set a single margin to auto
    means that it takes up ALL of the available space on that side. Setting both sides to auto
    means that all of the available space within the element will be evenly divided between the 
    right and left margin.
/* ######################################################################################## */

/* 5. Assuming text within a div that has a grey background, what CSS styling would you add 
to make it so that there is space between the text (on all sides) and the edge of the div element? */

/* div { 
    padding: 20px;
} */

/*SEE: padding definition

/* ######################################################################################## */

/* 6. Assume you have two buttons that you want to be dispalyed inline, 
but you also want them to be vertically aligned with the other elements above and below
them, as well as horizontally aligned to appear next to each other in the middle of the line 
they occupy. How woudl you accomplish this?

.parent-div { 
    text-align: center;
 }

 .btn { 
    *REMOVE DISPLAY PROPERTY*
 }

/* NOTE: recall that to center something horizontally you need to set the display to 
block and the left and right margins to auto. However, this display attribute 
inherently means that the buttons will be stacked on top of one another. To work around this, 
you can remove the block display from the buttons and give the parent div the text-align property
and set it to center. 
-Importantly, the text-align property is a bit of a misnomer, as works on *ALL* inline elements, 
*NOT* just on text.

/* ######################################################################################## */

/* 7.  Do number #6 but center the buttons using the flexbox method.
        Modify the CSS and HTML accordingly. 

/*-----HTML-----*/

/* <body>
    <div class="nav-wrapper">
        <div class="item">Shoes</div>
        <div class="item">Hoodies</div>
        <div class="item">T Shirts</div>
    </div>
</body> */

/*-----CSS-----*/
/* .nav-wrapper { 
    display: flex;
    justify-content: center;
} */

/*NOTE: The  default display of the div will be block, but just be changing
the display to flex, the children of the div will not flow from left to right
on the horizontal axis. At this point they will *NOT* be centered horizontally, they
will just be oriented horizontally but pushed to the left.
-Setting justify-content to center will but the buttons in the middle of the screen.
-Flexbox is only applied to it's *direct* children, not the chidren of its children etc. 
This means that you can create subcategories of divs and intentionally apply flex
to divs on certain level in order to make different orientations of elements displayed
horizontally inside dive displayed vertically
/* ######################################################################################## */

/* 8. Assuming  a div intended to function as a business card, with two children elements 
dispalyed next to one another. How would you make it so the business card itself is centered on 
the web page and does not grow and shrink when the window gets bigger and smaller? 
How would you get the business card div to display its children elements horiozontally? */


/*-----HTML-----*/ 
/* <div class="card">
    <img
        src="images/per.png"
        alt="Per Harald Borgen smiling at the camera with a colorful background" class="avatar border-blue">
    <div>
        <h3>Per Harald Borgen</h3>
        <p>Frontend Developer</p>
        <h4>Oslo, Norway</h4>
    </div>
</div> */

/*-----CSS-----*/

/* .card { 
    width: 200px;
    margin-right: auto;
    margin-left: auto;
    display: flex;
} */

/*NOTE: Remember that for the .card div, the width and margin properties
are applied to the div itself, whereas the flex and justify content properties 
are applied to its children.

/* ######################################################################################## */

/* 9. What is the shorthand for setting all four margins with a single line of CSS code? 
        What about setting two different margins (top/bottom and left/right)? */
    
/* margin: 10px 20px 30px 40px; 

margin: 25px 35px; */

/*NOTE: For setting four margins, the order is too, right, bottom, left (AKA clockwise) 
and the order for setting two margins is top/bottom first and then right/left
-Setting the margins this way is *BEST PRACTISE* as it avoids extra lines of code

/* ######################################################################################## */

/* 10. Set a photo as the background and make it so that when the browser window changes size, 
the images scales proportionally with it (as opposed to only revealing a detail of the images
when the window is small */
/* 
body {
    background-image: url("images/universe.jpg");
    background-size: cover;
} */

/* ######################################################################################## */

/* 11. Assume you have downloaded a  font file  called MyFont.tff that is located 
in the project root folder. What would you do to get it set up and apply it to an element?

@font-face {
    src: url("MyFont.ttf");
    font-family: CoolFont;
}

h1 { 
    font-family: CoolFont;
}

/*NOTE: in the @font-face rule, the value for font-family is whatever you 
want it to be; you are giving it a name here.
- That using fonts this way means that your website has to load fonts from external sources 
but this comes at a cost in terms of download cost and more data for users to download, which
can slow down how fast your past load and negatively impact the user experience. 
- There is not hard and fast rule as to how many fonts is too many, but two to three fonts per page 
is a good rule of thumb

/* ######################################################################################## */

/* 12. Write a sentence with an h1 tag and add an element that allows you to target a
single word.

<h3>Click <span class="bold">here</span>!</h3>

/*NOTE: spans are useful because they are  inline elements; using a div to target
a single word would break it up onto a new line bc divs are block based.

/* ######################################################################################## */

/*  13. Add shadow to text. What do the different values represent? */

/* h1 { 
    text-shadow: 5px 5px black;
} */

/*NOTE: The first numerical value is how much you want to push the shadow to the right. A negative
value here pushes it to the left. The second value pushes the shadow downwards, and a negative 
here pushes it up. The third value is blur and is optional. The fourth value is the color of the shadow. 

/* ######################################################################################## */

/* 14. Create a CSS group selector for mutliple HTMl element */

/* h1, h2 { 
    text-shadow: 0px, 0px, 1px black;
} */

/* ######################################################################################## */

/* !VOCAB!  */

/* selector: */
/* -- The CSS syntactic component that indicates which element the styling will be applied to:*/

/* rule */
/* --This is the CSS term that refers to the HTML element
being targeted (the selector) as well as the specific part of the 
element that is to be changed and how it will be changed

/* property: */ 
/*--The specific part of the HTML element that the CSS rule is targeting, 
such as color, margin, border etc. 

/* value: */ 
/*--The styling that will be applied to the preceeding property. For example, 
in a CSS rule, background would be a property, and the specific color 
, such as blue, would be the value

/* margin */ 
/* This is spacing aroudn the *OUTSIDE* of an element. It really just serves to create 
/* room in between different elements for visual appeal.


/* padding */ 
/* This is similar to a margin except it adds space on the *INTERIOR* of an element, 
so if a div has padding, space will be added between the content, such as text, and the
edges of the container.


/* hex color code */ 
/* This is a value of the various color properties in CSS that  starts with a
hashtag and is followed by six letters and/or numbers. This is another way of indicating 
colors and is essentially a recipe for a color that indicates how much red, green, and blue to 
add.

/* inline elements */ 
/* HTML elements that are displayed next to one another (horizontally). 
Some elements, such as buttons, are inline by default.

/* block elements */ 
/* HTML elements that stack up on top of one another (vertically). 
A block level element blocks our the rest of the available space on the 
horizontal axis so that nothing else can be placed there. So, if you have a column 
of images aligned to the left of a page and they are only taking up a portion of 
the screen, the area to the right of the images' respective container(s) will be blocked off so
no other elements can be positioned there, regardless of the width of the image. 

/* class */ 
/* This is a built in HTML attribute that can be added to any element. They value 
can be whatever you want it to be and the function of a class is to organize 
similar elements that will have the same styling so as to avoid applying the styling 
to a general element, such as div, which would instead apply that styling to
every div that exists on the page.

/* the box model */ 
/* This refers to the interplay of spacing in and around an element 
(from outside to inside); margin, border, padding, content

/* utility class */ 
/* This is a class dedicated to applying a CSS property, like a background color, 
font size etc.  A utility class is normally named after the property that it applies. 

/* inheritence */ 
/* -This reference to the idea that a parent div's CSS rules will automatically
be acquired by all of its children elements. It is important to note that inheritence doesn't
just happen with the direct children, but it works any number of layers down the descendent tree
of the element that we are selecting
- Not all CSS properties get inherited! For example, text-align gets inherited by *ALL*
descendents, but flex get inherited *ONLY* by direct children. Also, a button's text 
does *NOT* get by the text set in the body element, and it must speciifcally be assigned
-The importance of inheritence is that it allows us to avoid repeting our code and avoid bugs.

/* web safe fonts */
/* - When you visit a website via a client, the browser sends a request to the website's server
which responds my providing the necessary components (HTML, CSS, assets, JS, etc.) as well as the "recipes"
for the fonts to be used. However, for some websites they won't send you the fonts bc they are using a font
this is already preinstalled on most clients; this preinstalled font is known as a web safe font
and includes things like Arial, Verdena, and Helvetica.

/* font stack */
/* -This is a series of fonts as a CSS value for the font-family property; it is essentially
a list of fonts, with the client trying to use the first one and then going to the second one, then
third one, etc. if it can't find one.

/* sans-serif / serif */
/*-These are each two categories of fonts (not specific fonts).
- Serif fonts contain decorate strokes at the ends of the letters and sans-serif does not.

/* glyph */ 
/* -In typography this refers to as graphical unit, such as a single letter, but it may also 
refer to something like a diacritic (the tilde over an 'ñ')

/* id (attribute) */ 
/* IDs are used to apply CSS styling to a particular element, but they are distinct from classes 
in that all ids are unique and will only be applied once in the whole document; they are not
intended to be reused.

/* .webp (extension) */
/* -This is a file format similar to GIFs, but .webp has better compression and doesn't use 
as much data when sent from a server to a client. Giphy.com can be used to download
.webp images and it can be implemented in the exact same way as background-image.

/* replaced element */ 
/* -An element that exists outisde the scope of CSS (its contents are not affected by CSS).
Its position and size can be determined by CSS, but not its actual content. The most common example
of this is the img tag, where the media's intrinsic file size determines how it will appear on the page;
a photo that is 200 x 200 will immedaitely appear smaller in the window than a 500 x 500 image (assuming 
no additional CSS styling is applied). The concept of replaced elements is essential to embedding external
content.

/* hero section (of webpage)*/
/* -This is the prominent part at the top of most webpages that functions as the first glimpse of the page 
 and extends the full width of the page; it may contain a logo, title, call to action, background image etc.


/* !PRINCIPLES AND BEST PRACTICES OF DESIGN! */
/* -It is good practice not to have pure black text displayed on a pure white backgroun, 
as this is unpleasant on the eyes. Instead you could modify one or both to make them
a couple of shades darker than white or lighter than black
- Buttons will typically have more padding on the right and left hand sides than 
on the top and bottom
- When thinking about the height/width of an element it is important to take the 
box model into consideration; the total height of an input field, for example, won't just 
be the height of the field, but rather it will appear as that element's height *PLUS*
the pixels occupies by the padding, border, and margins.
- When setting the height for an input field, some browsers will not honor the 
CSS height rule, so it is better to use the line-height property combined with padding; 
the line-height property literally refers to the height of a line of text, and since text 
is the only thing that goes in an input field, setting the line height is the 
equivalent of setting the height of the inner content of the input field.
- It is good to have a contrast ratio of 4.5 or higher to make elements 
accessible for people who are visually impaired. The ratio can be checked by going to
userway.org/contrast and putting in the foreground and background colors of an element
- The method of centering inline elements as detailed in #6 using text-align is the simple
but inflexible method, and using flexbox is slightly harder but much more flexible
and is preferred by developers.
- Writing alt texts: don't include "image of", as this is implied, and be concise (less than 125 chars)
- Try to limit yourself to 2-3 different fonts per page so as not to slow down how fast the page loads. 
Make sure font files dont contain more glyphs than you need, and consider using newer
font formats, like WOFF2, which has much better compression and therefore smaller file sizes.
- When workig with images as background it can be a good idea to fetch colors from the background photo
to use as the pages color scheme; you can go to coolors.com and choose a palette from a photo
- To made text look like it has a glow, you can set the background to be slightly darker than
the text, so if they text is white, the background could be whitesmoke, and then create a textshadow
where the first two values are 0, the blur value is about 5px, and the color value is anything. 


/* !LIST OF COMMON PROPERTIES! */ 
/* background --> background color
/* color --> text color
/* font-size 
/* font-weight --> lighter/normal/bold | also takes num value
/* text-align --> left/center/right  | Note that this works on all inline elements, not just text
/* margin --> NUMpx/NUMem/NUMrem/NUMvh, vw
/* border --> NUMpx solid COLOR
/* border-radius --> NUMpx
/* line-height
/* justify-content --> start (pushes to left) / end (to right) / center / 
    space-around (all white space distributed on both sides of all elements) / 
    space-between (all white space distributed only between elements, not on the side 
    where there is not adjacent element)
/* alt --> | takes a string that describes an img. Enhances accessibility and functions as
            a fallback if the image doesn't render properly. Also good for SEO.