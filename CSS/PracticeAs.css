/* ######################################################################################## */

/* 1. The following two HTML elements are stacked vertically 
when the browser window is smaller, but once the window is expanded, the 
two elements sit next to one another on the horizontal axis. 
What styling would you add to these two elements to make it so they
are always position vertically regardless of the window size? */ 

/* -----HTML-----
<body>
    <img src="google.png" />
    <input type="text" />
</body>

-----CSS-----
div { 
    display: block;
} */

/* ######################################################################################## */

/* 2. If you have an image inside of a div and want to create some space 
above the image, would you add the margin to the image or to the div it 
sits inside? Why?

You would add the margin to the div because if its content gets changed, for example 
if the image is replaced with another element such as a video, the margin
stylign would remain and would not be applied to an element that is subject 
to change.

/* ######################################################################################## */

/* 3. Create a CSS rule that applies to a general element.
    Apply the same rule to a class. */

    /* div { 
        margin-top: 100px;
    }

    .main { 
        margin-top: 100px;
    } */

/* NOTE: There are different conventions for naming classes for HTML elements, so 
there is not necessarily one universal preference, but rather it will vary depending on
the company and the project 
- Critically, the browser will automatically apply some minimal styling to your page, 
such as a margin around the body element. To get rid of this, you would simply 
target the body in the CSS file and explicitly set the margin to zero.
- It is also important to note that if you have vertically stacked divs and you 
you add a margin to the bottom of the top div, and a margin to the top fo the bottom div, 
the result will *NOT* but a sum of the two margins, but rather they will collapse into each
other, and the larger margin will always take precedence while the smaller 
margin is essentially not applied. There are some specific scenarios where this is not
exactly the case, but that is generally not the case.
/* ######################################################################################## */

/* 4. Create a CSS rule to horizontally center an element inside its parent div */

/* img { 
    display: block; 
    width: 200px; 
    margin-left: auto; 
    margin-right: auto;
} */


/* NOTE: There are three conditions that need to be in place to center elements: 
    1. The display property must be set to block-- an element cannot center itself if it
    doesn't control full control of the horizontal space.
    2. The element must have a width; an element cannot be centered inside the browser if it
    is larger than the browser itself
    3. The left and right margin of the element must be set to auto; set a single margin to auto
    means that it takes up ALL of the available space on that side. Setting both sides to auto
    means that all of the available space within the element will be evenly divided between the 
    right and left margin.
/* ######################################################################################## */


/* !VOCAB!  */

/* selector: */
/* -- The CSS syntactic component that indicates which element the styling will be applied to:*/

/* rule */
/* --This is the CSS term that refers to the HTML element
being targeted (the selector) as well as the specific part of the 
element that is to be changed and how it will be changed

/* property: */ 
/*--The specific part of the HTML element that the CSS rule is targeting, 
such as color, margin, border etc. 

/* value: */ 
/*--The styling that will be applied to the preceeding property. For example, 
in a CSS rule, background would be a property, and the specific color 
, such as blue, would be the value

/* margin */ 
/* This is spacing all around an element. It really just serves to create 
/* room in between different elements for visual appeal.

/* hex color code */ 
/* This is a value of the various color properties in CSS that  starts with a
hashtag and is followed by six letters and/or numbers. This is another way of indicating 
colors and is essentially a recipe for a color that indicates how much red, green, and blue to 
add.

/* inline elements */ 
/* HTML elements that are displayed next to one another (horizontally)

/* block elements */ 
/* HTML elements that stack up on top of one another (vertically). 
A block level element blocks our the rest of the available space on the 
horizontal axis so that nothing else can be placed there. So, if you have a column 
of images aligned to the left of a page and they are only taking up a portion of 
the screen, the area to the right of the images' respective container(s) will be blocked off so
no other elements can be positioned there, regardless of the width of the image. 

/* class */ 
/* This is a built in HTML attribute that can be added to any element. They value 
can be whatever you want it to be and the function of a class is to organize 
similar elements that will have the same styling so as to avoid applying the styling 
to a general element, such as div, which would instead apply that styling to
every div that exists on the page.

/* !LIST OF COMMON PROPERTIES! */ 
/* background --> background color
/* color --> text color
/* font-size 
/* font-weight --> lighter/normal/bold
/* text-align --> left/center/right
/* margin --> NUMpx/NUMem/NUMrem/NUMvh, vw